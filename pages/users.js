import Head from "next/head";
import Styles from "../styles/pages/Users.module.scss";
import { Input, Button, Modal, Avatar, Row, Col } from "antd";
import { BsSearch } from "react-icons/bs";
import UserList from "../components/UserList";
import { useState, useEffect, use } from "react";
import useUsers from "../hooks/users";

const photoCache = {};

export default function Users() {
  const { userData, isLoading, error } = useUsers();

  const [users, setUsers] = useState([]);
  const [userList, setUserList] = useState([]);

  // setstate only after the data is fetched
  useEffect(() => {
    if (userData.length) {
      setUsers(userData);
      setUserList(userData);
    }
  }, [userData]);

  const [isModalOpen, setIsModalOpen] = useState(false);
  const [data, setData] = useState({});
  const [imageUrl, setImageUrl] = useState("");

  const showModal = async (id) => {
    const user = users.find((user) => user.id === id);
    setData(user);
    if (photoCache[id]) {
      setImageUrl(photoCache[id]);
    } else {
      const response = await fetch(
        `https://jsonplaceholder.typicode.com/photos/${id}`
      );
      const data = await response.json();
      setImageUrl(data.url);
      photoCache[id] = data.url;
    }
    setIsModalOpen(true);
  };

  const handleCancel = () => {
    setIsModalOpen(false);
    setImageUrl("");
  };

  const onSearch = (value) => {
    // filter users by name
    const filteredUsers = userList.filter((user) =>
      user.name.toLowerCase().includes(value.toLowerCase())
    );

    setUsers(filteredUsers);
  };

  const onSwitchChange = (checked, id) => {
    const updatedUsers = users.map((user) => {
      if (user.id === id) {
        return { ...user, disabled: checked };
      }
      return user;
    });
    // sort users by disabled property
    updatedUsers.sort((a, b) => {
      if (a.disabled && !b.disabled) {
        return 1;
      }
      if (!a.disabled && b.disabled) {
        return -1;
      }
      return 0;
    });
    setUsers(updatedUsers);
    setUserList(updatedUsers);
  };

  if (isLoading) {
    return <div>Loading...</div>;
  }

  return (
    <div className={Styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={Styles.header}>
        <div className={Styles.pageHeading}>Users</div>
        <Input
          size="large"
          placeholder="Search"
          prefix={<BsSearch />}
          onChange={(e) => onSearch(e.target.value)}
        />
        <Button size="large">Search</Button>
      </div>
      <UserList
        header={"User List"}
        users={users}
        onSwitchChange={onSwitchChange}
        showModal={showModal}
      />
      <Modal
        title="User Details"
        open={isModalOpen}
        footer={null}
        onCancel={handleCancel}
        destroyOnClose={true}
      >
        <Row justify={"center"}>
          <div
            style={{
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            <Avatar size={100} src={imageUrl} />
            <b>{data.name}</b>
            <span style={{ color: "#0c0c0c" }}>@{data.username}</span>
            <span>{data.phone}</span>
          </div>
        </Row>
      </Modal>
    </div>
  );
}
